@inject NavigationManager UriHelper
@inject IJSRuntime Js

@page "/"
@using Game.Cards
@using Game.Player

<PageTitle>New Game</PageTitle>
@if (_cards.Count > 0)
{
    <div class="alert alert-danger d-none" role="alert"></div>
    <div class="alert alert-success d-none" role="alert"></div>

    <div class="container text-center" id="config">
        <h1>Rules Configuration</h1>

        <div class="row mb-1">
            <div class="col">
                <label class="form-label mb-2" for="min-deck-cards">Cantidad Mínima de cartas en el Deck</label>
                <input type="number" id="min-deck-cards" class="form-control" placeholder="" min="1" max=@_cards.Count
                @bind=@_minDeckCards>
            </div>

            <div class="col">
                <label for="max-deck-cards" class="form-label mb-2">Cantidad Máxima de cartas en el Deck</label>
                <input id="max-deck-cards" type="number" class="form-control" min="1" max=@_cards.Count @bind=@_maxDeckCards>
            </div>

            <div class="col">
                <label for="hp-points" class="form-label mb-2"> Puntos de Vida</label>
                <input type="number" id="hp-points" class="form-control" min="1" @bind=@_hpPoints>
            </div>
        </div>
        <div class="row mb-1">

            <div class="col">
                <label for="initial-cards" class="form-label mb-2">Cartas a robar en el Primer Turno</label>
                <input type="number" id="initial-cards" class="form-control" min="1" @bind=@_initialCards>
            </div>

            <div class="col"></div>

            <div class="col">
                <label for="cards-per-turn" class="form-label mb-2">Cartas por Turno</label>
                <input type="number" id="cards-per-turn" class="form-control" placeholder="Cartas por turno" min="1"
                       @bind=@_cardsPerTurn>
            </div>

        </div>

        <div class="col-12 mt-3">
            <button class="btn btn-primary" @onclick=@SaveRules>Save Rules</button>
        </div>

    </div>

    @* New Player Section *@
    <div class="container text-center d-none" id="new-player">
        <div class="row">
            <div class="col">
                <label class="form-check-label mb-1" for="player-type">
                    <h2>Player Type</h2>
                </label>
                <div class="row">
                    <div class="col"></div>
                    <div class="col">
                        <select id="player-type" class="form-select mb-2" aria-label="Default select example"
                                @onchange="PlayerTypeChanged">
                            <option value="Human">Human</option>
                            <option value="AI" selected>AI</option>
                        </select>
                    </div>
                    <div class="col"></div>
                </div>
                <nav>
                    <h2>@_cards[_idx].Name</h2>
                    <img src="@GetSrc()" class="img-fluid" alt="">
                    <div class="row">
                        <div class="col">
                            <input class="form-check-input" type="checkbox" value="" id="flexCheckChecked"
                                   @bind=@_selected[_idx]>
                            <label class="form-check-label" for="flexCheckChecked">
                                Select Card
                            </label>
                        </div>

                        <ul class="pagination container justify-content-center">
                            <div class="flex-column-xs">
                                <li class="page-item mt-1" @onclick="@Prev">
                                    <a class="page-link" href="#">Previous</a>
                                </li>
                            </div>
                            <div class="col-xs">
                                <li class="page-item mt-1" @onclick="@Next">
                                    <a class="page-link" href="#">Next</a>
                                </li>
                            </div>
                        </ul>
                    </div>

                </nav>
                <div class="row">
                    <div class="col">
                        <input type="text" class="form-control" placeholder="Nickname" required @bind=@_nickName>
                        <button class="btn btn-success mt-2" @onclick=@AddPlayer>Add Player</button>
                    </div>
                </div>

            </div>
            <div class="col">
                <h3 class="mt-2">Effect</h3>
                <textarea class="form-control w-100 h-50" readonly>@_cards[_idx].Effect.EffectString</textarea>
                <h3 class="mt-2">Description</h3>
                <textarea class="form-control w-100 h-50" readonly>@_cards[_idx].Description</textarea>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger" role="alert">You should create some cards first
        <a href="newhero" class="nav-link"></a>
        <a href="newitem" class="nav-link"></a>
    </div>
}

@code {
    private int _idx;


    string _playerType = "AI";

    private readonly List<SimpleCard> _cards = GameController.Cards;

    readonly List<SimplePlayer> _players = new List<SimplePlayer>();

    private List<bool> _selected = new List<bool>();

    protected override void OnParametersSet()
    {
        _selected = new List<bool>(_cards.Count);

        for (int i = 0; i < _cards.Count; i++)
        {
            _selected.Add(true);
        }
    }

    private void Next()
    {
        _idx = (_idx + 1 + _cards.Count) % _cards.Count;
    }

    private void Prev()
    {
        _idx = (_idx - 1 + _cards.Count) % _cards.Count;
    }

    private string GetSrc()
    {
        if (_cards[_idx] is HeroCard)
            return "img/heroes/" + _cards[_idx].Name.ToLower().Replace(" ", "_") + ".png";

        return "img/items/" + _cards[_idx].Name.ToLower() + ".png";
    }

    private int _hpPoints = 4000;
    private int _initialCards = 5;
    private int _cardsPerTurn = 1;
    private int _minDeckCards = 1;
    private int _maxDeckCards = 50;
        private const int PlayersCnt = 2;

    private string _nickName = "";


    private async void SaveRules()
    {
        try
        {
            GameController.ChangeDefaults(_hpPoints, _initialCards, _cardsPerTurn, _minDeckCards, _maxDeckCards, PlayersCnt);
            await Js.InvokeVoidAsync("ShowSuccess", "Rules Saved");
            await Js.InvokeVoidAsync("HideConfig");
        }
        catch (Exception err)
        {
            await Js.InvokeVoidAsync("ShowError", err.Message);
        }
    }

    private List<SimpleCard> GetSelectedCards()
    {
        List<SimpleCard> selectedCards = new List<SimpleCard>();

        for (int i = 0; i < _cards.Count; i++)
        {
            if (_selected[i])
                selectedCards.Add(_cards[i]);
        }

        return selectedCards;
    }

    private async void AddPlayer()
    {
        _nickName = _nickName.Trim();

        try
        {
            SimpleDeck deck = new SimpleDeck(GetSelectedCards());

            var player = _playerType == "AI" ? new AiPlayer(_nickName, _hpPoints, 5, 5, deck) : new SimplePlayer(_nickName, _hpPoints, 5, 5, deck);
            _players.Add(player);
        }
        catch (Exception err)
        {
            await Js.InvokeVoidAsync("ShowError", err.Message);
        }

        ClearSelections();


        if (_players.Count == PlayersCnt)
        {
            await Js.InvokeVoidAsync("ShowSuccess", "Game Started, Open your Terminal");
            await Js.InvokeVoidAsync("HideAll");
            GameController.NewGame(_players[0], _players[1]);
            ReloadPage();
        }
        else
        {
            await Js.InvokeVoidAsync("ShowSuccess", "Player added successfully");
        }
    }

    private void PlayerTypeChanged(ChangeEventArgs ev)
    {
        if (ev.Value is not null)
        {
            _playerType = ev.Value.ToString()!;
        }
    }

    void ClearSelections()
    {
        _playerType = "AI";

        for (int i = 0; i < _selected.Count; i++)
        {
            _selected[i] = true;
        }

        _nickName = "";

        _idx = 0;
    }

    void ReloadPage()
    {
        UriHelper.NavigateTo(UriHelper.Uri, forceLoad: true);
    }

}