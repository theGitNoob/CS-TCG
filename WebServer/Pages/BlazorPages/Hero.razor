@page "/newhero"
@inject IJSRuntime JS

<div style="display: grid;">
  <div class="error-div"></div>
  <span style="font-size: xx-large;justify-self:center;">New Hero</span><br />

  <input type="text" placeholder="Hero Name" style="justify-self:center;" @bind="@HeroName">

  <input type="number" placeholder="Defense" style="margin-top:20px;justify-self:center;" @bind="@Defense">

  <input type="number" placeholder="Attack" style="margin-top: 20px;justify-self:center;" @bind="@Attack">

  <pre>
    <code style="width: 100%;">
      <textarea style="margin-top:20px;font-size: x-large; height: 100px;width:100%;" @bind="@Condition"
      placeholder="Code of the condition"></textarea>
    </code>
  </pre>

  <pre>
    <code style="width: 100%;">
      <textarea style="margin-top:20px;font-size: x-large; height: 100px;width:100%" @bind="@Action"
      placeholder="Code of the action"></textarea>
    </code>
  </pre>

  <textarea placeholder="Description" style="margin-top: 20px;" @bind=@HeroDescription></textarea>

  <input type="button" style="font-size: x-large;margin-top:20px" value="Create New Hero" class="btn btn-success"
    @onclick="@OnClickBtnMethod" />
</div>

@code {
  public string? Action;

  public string? Condition;

  public string? HeroName;

  public string? HeroDescription;

  public int Attack;

  public int Defense;

  public async void OnClickBtnMethod()
  {
    try
    {
      Game.GameController.CreateHeroCard(HeroName, Attack, Defense, HeroDescription, Condition, Action);
      Action = "";
      Condition = "";
      HeroName = "";
      HeroDescription = "";
      Attack = 0;
      Defense = 0;
    }
    catch (System.Exception e)
    {
      if (e is CompilationErrorException || e is ArgumentNullException)
      {
        await JS.InvokeVoidAsync("ShowError", e.Message);
      }
      else
      {
        throw e;
      }
    }

  }
}