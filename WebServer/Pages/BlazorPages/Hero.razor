@page "/newhero"
@inject IJSRuntime Js

<div style="display: grid;">
  <div class="alert alert-danger d-none" role="alert"></div>
  <div class="alert alert-success d-none" role="alert"></div>

  <span style="font-size: xx-large;justify-self:center;">New Hero</span><br />

  <input type="text" placeholder="Hero Name" style="justify-self:center;" @bind="@_heroName">

  <input type="number" placeholder="Defense" style="margin-top:20px;justify-self:center;" @bind="@_defense">

  <input type="number" placeholder="Attack" style="margin-top: 20px;justify-self:center;" @bind="@_attack">

  <pre>
    <code style="width: 100%;">
      <textarea style="margin-top:20px;font-size: x-large; height: 100px;width:100%" @bind="@_codeString"
      placeholder="Code of the Effect"></textarea>
    </code>
  </pre>

  <textarea placeholder="Description" style="margin-top: 20px;" @bind=@_heroDescription></textarea>

  <input type="button" style="font-size: x-large;margin-top:20px" value="Create New Hero" class="btn btn-success"
    @onclick="@OnClickBtnMethod" />
</div>

@code {
  private string? _codeString;

  private string? _heroName;

  private string? _heroDescription;

  private int _attack;

  private int _defense;

  private async void OnClickBtnMethod()
  {
    try
    {
      GameController.CreateHeroCard(_heroName, _attack, _defense, _heroDescription,  _codeString);
      _codeString = "";
      _heroName = "";
      _heroDescription = "";
      _attack = 0;
      _defense = 0;
      await Js.InvokeVoidAsync("ShowSuccess", "Hero added successfully");
    }
    catch (Exception exception)
    {
      if (exception is CompilationErrorException || exception is ArgumentNullException)
      {
        await Js.InvokeVoidAsync("ShowError", exception.Message);
      }
      else
      {
        Console.WriteLine(exception);
      }
    }

  }
}