@using Compiler
@using Compiler.Syntax
@inject IJSRuntime jsRuntime

@page "/compiler"

<PageTitle>Compiler</PageTitle>

<div class="alert alert-danger d-none" role="alert"></div>
<div class="alert alert-success d-none" role="alert"></div>

<div>
    <span style="font-size: xx-large;">Compiler</span><br/>
    <textarea style="font-size: x-large; height:400px" width="100%" @bind="@Text" placeholder="Your code here"> </textarea><br/>
    <br/>
    <div>
        @if (Success)
        {
            /// <summary>
            /// If the code is correct, the result will be displayed
            /// </summary>
            /// Else, the error will be displayed
            @if (!diagnostics!.Any())
            {
                <h6 style="font-size: x-large; color: #0c479f">@result!.Value</h6>
            }
            else
            {
                @foreach (var diagnostic in diagnostics!)
                {
                    @if (diagnostic != null)
                    {
                        <h2 style="color: brown;">@diagnostic</h2>

                        <br/>
                        @if (diagnostic.Span.Start == Text.Length)
                        {
                            continue;
                        }
                        else
                        {
                            DiagnosticProccess(diagnostic);
                            <span style="font-size: 28px;">
                                @prefix <span style="color: brown;">@error</span> @subfix
                            </span>
                        }
                    }
                }
            }
        }
    </div>
    <input type="button" style="font-size: x-large" value="Compiler" class="btn btn-success"
           @onclick="OnClickBtnMethod"/>
</div>

@code
{
    [Parameter]
    public bool Success { get; set; }

    [Parameter]
    public string? Text { get; set; }

    public Dictionary<VariableSymbol, object> variables = new Dictionary<VariableSymbol, object>();
    public SyntaxTree? syntaxTree { get; set; }
    public Compilation? compilation { get; set; }

    [Parameter]
    public EvaluationResult? result { get; set; }

    [Parameter]
    public IEnumerable<Diagnostic>? diagnostics { get; set; }

    [Parameter]
    public string? prefix { get; set; }

    [Parameter]
    public string? error { get; set; }

    [Parameter]
    public string? subfix { get; set; }

    SimplePlayer p1;

    SimplePlayer p2;


    public async void OnClickBtnMethod()
    {
        if (string.IsNullOrEmpty(Text)) return;
        try
        {
            syntaxTree = SyntaxTree.Parse(Text!);
            compilation = new Compilation(syntaxTree);
            result = compilation.Evaluate(variables, p1);
            diagnostics = result.Diagnostics;
            Console.WriteLine(p1.Hp);
            Console.WriteLine(p2.Hp);
            if (!Success)
                Success = true;
        }
        catch (Exception e)
        {
            await jsRuntime.InvokeVoidAsync("ShowError", e.Message);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SimpleDeck d1 = new SimpleDeck(GameController.Cards);
        SimpleDeck d2 = new SimpleDeck(GameController.Cards);
        p1 = new SimplePlayer("Rafa", 5000, 5, 5, d1);
        p2 = new SimplePlayer("Eisler", 5000, 5, 5, d2);
        Success = false;
        p1.SetEnemy(p2);
        p2.SetEnemy(p1);
    }

    public async void DiagnosticProccess(Diagnostic diagnostic)
    {
        try
        {
            if (diagnostic.Span.Start == Text!.Length)
            {
                prefix = Text.Substring(0, diagnostic.Span.Start - 1);
                error = Text.Substring(diagnostic.Span.Start - 1, 1);
                subfix = Text.Substring(diagnostic.Span.End - 1);
            }
            else
            {
                prefix = Text.Substring(0, diagnostic.Span.Start);

                error = Text.Substring(diagnostic.Span.Start, diagnostic.Span.Length);
                subfix = Text.Substring(diagnostic.Span.End);
            }
        }
        catch (System.Exception e)
        {
            if (e is CompilationErrorException || e is ArgumentNullException)
            {
                await jsRuntime.InvokeVoidAsync("ShowError", e.Message);
            }
            else
            {
                throw e;
            }
        }
    }
}